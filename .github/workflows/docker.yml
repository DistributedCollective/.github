on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: true
        type: string
      KUBE_NAMESPACE:
        required: true
        type: string
      event_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      private_registry:
        required: false
        type: string
      aws_region:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN:
        required: false

jobs:
  login-to-amazon-ecr-private:
    runs-on: ubuntu-latest
    if: inputs.private_registry == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # optional
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'false'
          registry-type: private
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      docker_username: ${{ steps.login-ecr.outputs.docker_username_768438872063_dkr_ecr_us_east_1_amazonaws_com }}
      docker_password: ${{ steps.login-ecr.outputs.docker_password_768438872063_dkr_ecr_us_east_1_amazonaws_com }}
  login-to-amazon-ecr-public:
    if: inputs.private_registry == ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # optional

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'false'
          registry-type: public
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      docker_username: ${{ steps.login-ecr.outputs.docker_username_public_ecr_aws }}
      docker_password: ${{ steps.login-ecr.outputs.docker_password_public_ecr_aws }}
  build:
    needs: [login-to-amazon-ecr-private, login-to-amazon-ecr-public]
    if: >
      always() &&
      (
        needs.login-to-amazon-ecr-private.result == 'success' ||
        needs.login-to-amazon-ecr-public.result == 'success'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build, tag, and push docker image to Amazon ECR Public
        run: |
          if [[ "${{ needs.login-to-amazon-ecr-private.result }}" == "success" ]]; then
            echo "REGISTRY=${{ needs.login-to-amazon-ecr-private.outputs.registry }}" >> $GITHUB_ENV
            DOCKER_USERNAME=${{ needs.login-to-amazon-ecr-private.outputs.docker_username }}
            echo "::add-mask::$DOCKER_USERNAME" >> $GITHUB_ENV
            DOCKER_PASSWORD=${{ needs.login-to-amazon-ecr-private.outputs.docker_password }}
            echo "::add-mask::$DOCKER_PASSWORD" >> $GITHUB_ENV
          elif [[ "${{ needs.login-to-amazon-ecr-public.result }}" == "success" ]]; then
            echo "REGISTRY=${{ needs.login-to-amazon-ecr-public.outputs.registry }}" >> $GITHUB_ENV
            DOCKER_USERNAME=${{ needs.login-to-amazon-ecr-public.outputs.docker_username }}
            echo "::add-mask::$DOCKER_USERNAME" >> $GITHUB_ENV
            DOCKER_PASSWORD=${{ needs.login-to-amazon-ecr-public.outputs.docker_password }}
            echo "::add-mask::$DOCKER_PASSWORD" >> $GITHUB_ENV
          fi

      - name: Login to registry ${{ env.REGISTRY }}
        if: inputs.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          ecr: false

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.dockerfile_path }}/Dockerfile
          push: ${{ inputs.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ inputs.IMAGE_NAME }}:${{ inputs.KUBE_NAMESPACE }}
