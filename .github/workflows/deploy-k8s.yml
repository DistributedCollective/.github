on:
  workflow_call:
    inputs:
      KUBE_NAMESPACE:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      k8s_cluster_name:
        required: true
        type: string
      app_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN:
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read app properties
        id: gensecretenvs
        shell: bash
        run: |
           ITER=0;
           for i in `cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS | jq -r 'keys[]'`; do 
             if [[ $(cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS.$i) = "" ]]; then 
               echo "APP_SECRET_KEY${ITER}=$i" >> $GITHUB_ENV
               ITER=$(expr $ITER + 1)
             fi; 
           done;

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # optional

      - name: use awscli 
        uses: unfor19/install-aws-cli-action@master
        with:
          version: 2
      
      - run: aws --version 
        shell: bash

      - name: login to EKS
        id: kubeconfig
        run: echo "::set-output name=KUBECONFIG::$(aws eks --region ${{ inputs.aws_region }} update-kubeconfig --name ${{ inputs.k8s_cluster_name }} --dry-run | base64 -w 0)"
        shell: bash
       
      - name: Generate k8s secret params
        shell: bash
        run: |
           ITER=0;
           tmp=$(mktemp);
           for i in `cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS | jq -r 'keys[]'`; do 
             if [[ $(cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS.$i) = "" ]]; then
               if [[ "$ITER" == 0 ]]; then
                 jq --arg key "$i" --arg value "${{ secrets[env.APP_SECRET_KEY0] }}" '.APP_ENV_VARS[$key] = $value' .github/workflows/ci-properties.json > "$tmp" && mv "$tmp" .github/workflows/ci-properties.json
                 ITER=$(expr $ITER + 1)
                 continue
               fi
               if [[ "$ITER" == 1 ]]; then
                 jq --arg key "$i" --arg value "${{ secrets[env.APP_SECRET_KEY1] }}" '.APP_ENV_VARS[$key] = $value' .github/workflows/ci-properties.json > "$tmp" && mv "$tmp" .github/workflows/ci-properties.json
                 ITER=$(expr $ITER + 1)
                 continue
               fi
               if [[ "$ITER" == 2 ]]; then
                 jq --arg key "$i" --arg value "${{ secrets[env.APP_SECRET_KEY2] }}" '.APP_ENV_VARS[$key] = $value' .github/workflows/ci-properties.json > "$tmp" && mv "$tmp" .github/workflows/ci-properties.json
                 ITER=$(expr $ITER + 1)
                 continue
               fi
               if [[ "$ITER" == 3 ]]; then
                 jq --arg key "$i" --arg value "${{ secrets[env.APP_SECRET_KEY3] }}" '.APP_ENV_VARS[$key] = $value' .github/workflows/ci-properties.json > "$tmp" && mv "$tmp" .github/workflows/ci-properties.json
                 ITER=$(expr $ITER + 1)
                 continue
               fi
             fi;
           done;

      - name: Generate k8s secret params
        id: genparams
        shell: bash
        run: |
            for i in `cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS | jq -r 'keys[]'`; do params="${params} --from-literal=$i=$(cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS.$i)"; done
            echo "::set-output name=k8sparams::$params"
            echo "::add-mask::$params"

      - name: Create kubernetes secret with service parameters
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
          # RELEASE_IMAGE: ${{ steps.meta.outputs.tags }}
        with:
          args: create secret generic ${{ inputs.app_name }} ${{ steps.genparams.outputs.k8sparams }}

      - name: kubernets apply config
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
          # RELEASE_IMAGE: ${{ steps.meta.outputs.tags }}
        with:
          args: apply -f deployment.yaml -n ${{ inputs.KUBE_NAMESPACE }}

      - name: rollout
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
          # RELEASE_IMAGE: ${{ steps.meta.outputs.tags }}
        with:
          args: rollout restart deploy/sov-notification-service -n ${{ inputs.KUBE_NAMESPACE }}
