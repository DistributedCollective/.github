on:
  workflow_call:
    inputs:
      KUBE_NAMESPACE:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN: # temp
        required: true

env:
  AWS_REGION: us-east-2
  K8S_CLUSTER_NAME: k8-mainnet

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # temp
          aws-region: ${{ env.AWS_REGION }}

      - name: use awscli 
        uses: unfor19/install-aws-cli-action@master
        with:
          version: 2
      
      - run: aws --version 
        shell: bash

      - name: get token
        id: kubeconfig
        run: echo "::set-output name=KUBECONFIG::$(aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.K8S_CLUSTER_NAME }} --dry-run)"
        shell: bash
        
      - name: kubernets apply config
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
          # RELEASE_IMAGE: ${{ steps.meta.outputs.tags }}
        with:
          args: apply -f deployment.yaml -n ${{ inputs.KUBE_NAMESPACE }}

      - name: rollout
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
          # RELEASE_IMAGE: ${{ steps.meta.outputs.tags }}
        with:
          args: rollout restart deploy/sov-notification-service -n ${{ inputs.KUBE_NAMESPACE }}
